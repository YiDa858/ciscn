package old.FIDO;
import mapper.FidoUserMapper;
import com.yubico.webauthn.data.*;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import pojo.FidoUser;

import java.io.IOException;
import java.io.InputStream;
import java.util.*;

public class FidoServer {
    private String rp_ID="Test";
    private String mybatisResource = "mybatis-config.xml";
    private SqlSessionFactory sqlSessionFactory;
    private String[] encryptType = new String[]{""};

    public FidoServer() throws IOException {
        InputStream inputStream = Resources.getResourceAsStream(mybatisResource);
        sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    }

    public boolean isRegister(int userid){
        SqlSession sqlSession = sqlSessionFactory.openSession();
        FidoUserMapper fidoUserMapper = sqlSession.getMapper(FidoUserMapper.class);
        List<FidoUser> ans = fidoUserMapper.getUserByID(userid);
        if (ans.isEmpty()){
            return false;
        }else {
            return true;
        }
    }
    public void fidoRegister(String userName,String userPubKey){
        SqlSession sqlSession = sqlSessionFactory.openSession(true);
        FidoUserMapper fidoUserMapper = sqlSession.getMapper(FidoUserMapper.class);
        FidoUser fidoUser =new FidoUser(userName, userPubKey);
        fidoUserMapper.insertNewUser(fidoUser);
        System.out.println("Successfully register a new user: id: "+fidoUser.getUserid()+" /name: "+userName);
    }

    /**
     * 生成并获取挑战Challenge。随机生成Challenge并进行base64编码
     *
     * @return 一个ByteArray数组
     * TODO:确认返回类型是ByteArray还是Base64.getEncoder().encodeToString(challengeBytes)
     */
    public ByteArray generateChallenge(){
        byte[] challengeBytes = new byte[32];
        new Random().nextBytes(challengeBytes);
        System.out.println(Base64.getEncoder().encodeToString(challengeBytes));
//        return Base64.getEncoder().encodeToString(challengeBytes);
        return ByteArray.fromBase64(Base64.getEncoder().encodeToString(challengeBytes));
    }

    /**
     * 测试FidoServer
     * @param args
     */
    public static void main(String[] args) throws IOException {
        FidoServer fidoServer = new FidoServer();
        System.out.println(fidoServer.generateChallenge());
    }
//    ------------------------------------------------------------------Code below were generated by ChatGPT with numerous bugs--------------------------------------------------------
//
//    private RelyingParty relyingParty;
//
//    private AttestationResolver attestationResolver;
//
//    private MetadataResolver metadataResolver;
//
//    public FidoServer() {
//        RelyingPartyIdentity rpIdentity = RelyingPartyIdentity.builder()
//                .id("example.com")
//                .name("Example RP")
//                .build();
//        relyingParty = RelyingParty.builder()
//                .identity(rpIdentity)
//                .build();
//
//        attestationResolver = new AttestationResolver();
//        metadataResolver = new MetadataResolver();
//    }
//
//    public RegistrationStartRequest buildRegistrationRequest(ByteArray challenge, String username) {
//        RegistrationRequest registrationRequest = relyingParty.startRegistration(
//                StartRegistrationOptions.builder()
//                        .user(UserIdentity.builder()
//                                .name(username)
//                                .displayName(username)
//                                .id(new ByteArray(username.getBytes()))
//                                .build())
//                        .build()
//        );
//        return RegistrationStartRequest.builder()
//                .publicKeyCredentialRpEntity(PublicKeyCredentialRpEntity.builder()
//                        .id("example.com")
//                        .name("Example RP")
//                        .build())
//                .publicKeyCredentialUserEntity
//                        (PublicKeyCredentialUserEntity.builder()
//                                .id(registrationRequest.getUser().getId())
//                                .name(username)
//                                .displayName(username)
//                                .build())
//                .publicKeyCredentialChallenge(challenge)
//                .publicKeyCredentialParameters(registrationRequest.getParameters())
//                .attestationConveyancePreference(AttestationConveyancePreference.NONE)
//                .build();
//    }
//
//    public void processRegistrationResponse(RegistrationResponse response, String username) throws
//            InvalidRegistrationException,
//            ExecutionException,
//            RegistrationFailedException,
//            AttestationException {
//        CollectedClientData clientData = response.getClientData();
//        ByteArray attestationObject = response.getAttestationObject();
//
//        RegistrationResult registrationResult = relyingParty.finishRegistration(
//                FinishRegistrationOptions.builder()
//                        .request(response.getRequest())
//                        .response(response)
//                        .build()
//        );
//
//        // validate attestation object
//        Attestation attestation = attestationResolver.resolveAttestation(attestationObject);
//        MetadataObject metadata = metadataResolver.getMetadata(attestation);
//        if (metadata != null && metadata.isSelfAttested()) {
//            throw new InvalidRegistrationException("Self-attestation not allowed.");
//        }
//
//        // save the credential
//        RegisteredCredential credential = registrationResult.getKeyIdCredential();
//        // save the credential in the database
//    }
//
//    public AuthenticationStartRequest buildAuthenticationRequest(ByteArray challenge, String username) {
//        AuthenticationRequest authenticationRequest = relyingParty.startAuthentication(
//                StartAuthenticationOptions.builder()
//                        .username(username)
//                        .build()
//        );
//        return AuthenticationStartRequest.builder()
//                .publicKeyCredentialRpEntity(PublicKeyCredentialRpEntity.builder()
//                        .id("example.com")
//                        .name("Example RP")
//                        .build())
//                .publicKeyCredentialUserEntity(PublicKeyCredentialUserEntity.builder()
//                        .id(authenticationRequest.getUserHandle())
//                        .name(username)
//                        .build())
//                .publicKeyCredentialChallenge(challenge)
//                .publicKeyCredentialParameters(authenticationRequest.getParameters())
//                .build();
//    }
//
//    public void processAuthenticationResponse(AuthenticationResponse response) throws
//            InvalidAuthenticationException,
//            UnsupportedAppIdException,
//            ExecutionException {
//        CollectedClientData clientData = response.getClientData();
//        ByteArray authenticatorData = response.getAuthenticatorData();
//        ByteArray signature = response.getSignature();
//        ByteArray clientExtensions = response.getClientExtensions();
//
//        // validate the response
//        relyingParty.finishAuthentication(
//                FinishAuthenticationOptions.builder()
//                        .request(response.getRequest())
//                        .response(response)
//                        .build()
//        );
//        // authentication succeeded
//    }
}